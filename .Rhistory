n.certain = 0
X = data$TOTTCH01 #total number of children
biggerThanSkip = TRUE
certain = logical(length(X))
I = sum(X)/n.uncertain
while(biggerThanSkip){
cases.biggerThanSkip = X[!certain] > I
s = sum(cases.biggerThanSkip) #how many are bigger than skip?
if (s>0){
certain = certain | cases.biggerThanSkip #add biggerthanskip cases to certain
n.certain = sum(certain) #how many certain
n.uncertain = n-n.certain #how many uncertain
I = sum(X[!certain])/n.uncertain #mean of uncertain
biggerThanSkip = TRUE
}
else{
biggerThanSkip = FALSE
}
}
sample = data[certain, ]
sample$certain = TRUE
data.uncertain = data[!certain, ]
X.cumsum = cumsum(X[!certain])
X.cumsum = cumsum(data.uncertain$TOTTCH01)
case.index = which(X.cumsum > runif(1, min=0, max = I))[1]
for(count in 1:(n.uncertain)){
case = data.uncertain[case.index, ]
case$certain = FALSE
sample = rbind(sample, case)
val = X.cumsum[case.index] + I
case.index = which(X.cumsum > val)[1]
if (is.na(case.index)) {print('break'); break}
}
#3
sample.certain = sample[sample$certain == TRUE, ]
sample.uncertain = sample[sample$certain == FALSE, ]
p.sample.uncertain = sample.uncertain$TOTTCH01/I
z.uncertain = sum(sample.uncertain$PK1201/p.sample.uncertain)
z.certain = sum(sample.certain$PK1201)
total.est = z.certain + z.uncertain
total.est
#4
var.est = var(sample.uncertain$PK1201/p.sample.uncertain)/n
var.est
#5
#1.96 * sqrt(0.2*0.8 \ 0.67n) < 0.05 => n > 366.96
load('/Users/tae/Box Sync/Uchicago/Courseworks/2017-3Fall/S331/schooldistrict.RData')
s = schooldistrict
set.seed(1)
data <- s[complete.cases(s[,c(13,21)]), c(13,21)]
N.complete = nrow(data) #complete pop size
n = 100
n.uncertain = 100
n.certain = 0
X = data$TOTTCH01 #total number of children
biggerThanSkip = TRUE
certain = logical(length(X))
I = sum(X)/n.uncertain
while(biggerThanSkip){
cases.biggerThanSkip = X[!certain] > I
s = sum(cases.biggerThanSkip) #how many are bigger than skip?
if (s>0){
certain = certain | cases.biggerThanSkip #add biggerthanskip cases to certain
n.certain = sum(certain) #how many certain
n.uncertain = n-n.certain #how many uncertain
I = sum(X[!certain])/n.uncertain #mean of uncertain
biggerThanSkip = TRUE
}
else{
biggerThanSkip = FALSE
}
}
sample = data[certain, ]
sample$certain = TRUE
data.uncertain = data[!certain, ]
X.cumsum = cumsum(X[!certain])
X.cumsum = cumsum(data.uncertain$TOTTCH01)
case.index = which(X.cumsum > runif(1, min=0, max = I))[1]
for(count in 1:(n.uncertain)){
case = data.uncertain[case.index, ]
case$certain = FALSE
sample = rbind(sample, case)
val = X.cumsum[case.index] + I
case.index = which(X.cumsum > val)[1]
if (is.na(case.index)) {print('break'); break}
}
#3
sample.certain = sample[sample$certain == TRUE, ]
sample.uncertain = sample[sample$certain == FALSE, ]
p.sample.uncertain = sample.uncertain$TOTTCH01/I
z.uncertain = sum(sample.uncertain$PK1201/p.sample.uncertain)
z.certain = sum(sample.certain$PK1201)
total.est = z.certain + z.uncertain
total.est
#4
var.est = var(sample.uncertain$PK1201/p.sample.uncertain)/n
var.est
#5
#1.96 * sqrt(0.2*0.8 \ 0.67n) < 0.05 => n > 366.96
load('/Users/tae/Box Sync/Uchicago/Courseworks/2017-3Fall/S331/schooldistrict.RData')
s = schooldistrict
#1.1 1-p_i
#1.2 (1-p_i)^n
#1.3 1-(1-p_i)^n
#2
set.seed(1)
data <- s[complete.cases(s[,c(13,21)]), c(13,21)]
N.complete = nrow(data) #complete pop size
n = 100
n.uncertain = 100
n.certain = 0
X = data$TOTTCH01 #total number of children
biggerThanSkip = TRUE
certain = logical(length(X))
I = sum(X)/n.uncertain
while(biggerThanSkip){
cases.biggerThanSkip = X[!certain] > I
s = sum(cases.biggerThanSkip) #how many are bigger than skip?
if (s>0){
certain = certain | cases.biggerThanSkip #add biggerthanskip cases to certain
n.certain = sum(certain) #how many certain
n.uncertain = n-n.certain #how many uncertain
I = sum(X[!certain])/n.uncertain #mean of uncertain
biggerThanSkip = TRUE
}
else{
biggerThanSkip = FALSE
}
}
sample = data[certain, ]
sample$certain = TRUE
data.uncertain = data[!certain, ]
X.cumsum = cumsum(X[!certain])
X.cumsum = cumsum(data.uncertain$TOTTCH01)
case.index = which(X.cumsum > runif(1, min=0, max = I))[1]
for(count in 1:(n.uncertain)){
case = data.uncertain[case.index, ]
case$certain = FALSE
sample = rbind(sample, case)
val = X.cumsum[case.index] + I
case.index = which(X.cumsum > val)[1]
if (is.na(case.index)) {print('break'); break}
}
#3
sample.certain = sample[sample$certain == TRUE, ]
sample.uncertain = sample[sample$certain == FALSE, ]
p.sample.uncertain = sample.uncertain$TOTTCH01/I
z.uncertain = sum(sample.uncertain$PK1201/p.sample.uncertain)
z.certain = sum(sample.certain$PK1201)
total.est = z.certain + z.uncertain
total.est
#4
var.est = var(sample.uncertain$PK1201/p.sample.uncertain)/n
var.est
#5
#1.96 * sqrt(0.2*0.8 \ 0.67n) < 0.05 => n > 366.96
var.est = var(sample.uncertain$PK1201/p.sample.uncertain)/n
var.est
R
p.sample.uncertain
res$looplist
res$theta[,1]
res$bic$theta[,1]
plot(res$bic$theta[,1])
points(li$theta[,1], col = 'red')
simdata2 = function(p,n){
k = round(n/2)
sigma = runif(p, .1, 1)
phi = rnorm(p)
theta = matrix(0, p, n)
cp = sample(1:(p-1), k)
cp = c(0, cp, p)
cp = sort(cp)
for (c in 2:length(cp)){
change = rbinom(1, 1, 0.2)
theta[(cp[c-1]+1):cp[c], ] = change*sample(seq(-3, 3), 1)
}
#theta[cnv_probes, cancer_cells] = theta[cnv_probes, non_cancer_cells[1]] + rep(0.5, length(cnv_probes))
Y = matrix(0, p, n)
phi = rnorm(p,0,1)
xi = rnorm(n,0,1)
for (i in 1:p){
for (j in 1:n){
Y[i,j] = (theta[i,j] + xi[j]) * phi[i] + rnorm(1)
}
}
return(list(Y=Y, theta=theta, phi=phi, xi=xi, cp = cp))
}
li = simdata2(382, 32)
Y = as.matrix(li$Y)
for (j in 1:32){
plot((li$theta[,j] + li$xi[j])*li$phi, ylim = c(-6,6))
points((res$aic$theta[,j] + res$aic$xi[j]) * res$aic$phi, col='red')
Sys.sleep(0.5)
}
res = cnv_c(Y, wts, steps, 30)
res_old = cnv_c_old(Y,wts,steps,30)
for (j in 1:32){
plot((li$theta[,j] + li$xi[j])*li$phi, ylim = c(-6,6))
points((res$aic$theta[,j] + res$aic$xi[j]) * res$aic$phi, col='red')
Sys.sleep(0.5)
}
plot(li$theta[,1])
points(res$aic$theta[,1], col = 'red')
plot(li$phi, type = 'l')
points(res$aic$phi, col = 'red')
plot(li$phi, type = 'l')
lines(res$aic$phi, col = 'red')
plot(li$phi, type = 'l')
lines(-res$aic$phi, col = 'red')
plot(li$xi, type = 'l')
lines(res$aic$xi, col = 'red')
res$aic$xi
plot(li$xi, type = 'l')
lines(res$aic$xi[1,], col = 'red')
j =  22 #chromosome ID
load("../summary.100kb.normalized.RData")
X = data.100kb[data.100kb[, 1]%in%paste0("chr", j), -c(1:3)]
Y = as.matrix(apply(X, 2, as.numeric))
wts = defaultWeights_c(nrow(Y))
steps = ncol(Y)-1
plot(Y[,30])
plot(Y[,30], type = 'l')
res = cnv_c(Y, wts, steps, 30)
res_old = cnv_c_old(Y,wts,steps,30)
wts = defaultWeights_c(nrow(Y))
steps = ncol(Y)-1
res = cnv_c(Y, wts, steps, 30)
res_old = cnv_c_old(Y,wts,steps,30)
lines(res$aic$theta[,30]+res$aic$xi[30])
plot(res$aic$theta[,30]+res$aic$xi[30],type = 'l')
plot(res$aic$theta[,30]+res$aic$xi[30],type = 'l', col = 'red')
points(Y[,30], pch='*')
lines(res$aic$theta[,30], col = 'blue')
for (i in 1:32){
plot(res$aic$theta[,1], type = 'l', ylim = c(-5,5))
for (i in 1:32){
for (i in 2:32){
lines(res$aic$theta[,i])
Sys.sleep(0.5)
}
plot(res_old$aic$theta[,1], type = 'l', ylim = c(-5,5))
for (i in 2:32){
lines(res_old$aic$theta[,i])
Sys.slee(0.5)
}
for (i in 2:32){
lines(res_old$aic$theta[,i])
Sys.sleep(0.5)
}
plot(res$aic$theta[,1], type = 'l', ylim = c(-5,5))
for (i in 2:18){
lines(res$aic$theta[,i])
Sys.sleep(0.5)
}
plot(res_old$aic$theta[,1], type = 'l', ylim = c(-5,5))
for (i in 2:18){
lines(res_old$aic$theta[,i])
}
plot(Y[,10])
plot(Y[,19])
plot(Y[,20])
plot(Y[,21])
plot(Y[,22])
plot(res$aic$theta[,1], type = 'l', ylim = c(-5,5))
for (i in 2:21){
lines(res$aic$theta[,i])
Sys.sleep(0.5)
}
plot(res$aic$theta[,1], type = 'l', ylim = c(-5,5))
for (i in 2:21){
lines(res$aic$theta[,i])
}
plot(res_old$aic$theta[,1], type = 'l', ylim = c(-5,5))
for (i in 2:21){
lines(res_old$aic$theta[,i])
}
diffmat = matrix(0, 21, 21)
for (i in 1:20){
for (j in (i+1):21){
vec1 = res$aic$theta[,i]
vec2 = rec$aic$theta[,j]
diffmat(i,j) = diffmat(j,i) = sum((vec1-vec2)^2)
}
}
for (i in 1:20){
for (j in (i+1):21){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat(i,j) = diffmat(j,i) = sum((vec1-vec2)^2)
}
}
diffmat = matrix(0, 21, 21)
for (i in 1:20){
for (j in (i+1):21){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat(i,j) = diffmat(j,i) = sum((vec1-vec2)^2)
}
}
for (i in 1:20){
for (j in (i+1):21){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat(i,j) = sum((vec1-vec2)^2)
diffmat(j,i) = diffmat(i,j)
}
}
diffmat = matrix(0, 21, 21)
for (i in 1:20){
for (j in (i+1):21){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat[i,j] = diffmat[j,i] = sum((vec1-vec2)^2)
}
}
sum(diffmat^2)
diffmat_new = matrix(0, 21, 21)
diffmat_old = matrix(0, 21, 21)
for (i in 1:20){
for (j in (i+1):21){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
sum(diffmat)
sum(diffmat_old)
sum(diffmat_new)
sum(diffmat_old) / (21*21-21)
sum(diffmat_new) / (21*21-21)
sum(diffmat_old) / (21*21-21) / p
sum(diffmat_old) / (21*21-21) / 382
sum(diffmat_new) / (21*21-21) / 382
cluster2 = 22:32
cluster1 = 1:21
cluster2 = 22:32
diffmat_new = matrix(0, length(cluster1), length(cluster1))
diffmat_old = matrix(0, length(cluster1), length(cluster1))
for (i in cluster2){
for (j in (i+1):21){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
for (i in cluster2){
for (j in (i+1):cluster2[length(cluster2)]){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
for (i in cluster1){
for (j in (i+1):cluster1[length(cluster1)]){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
cluster1
for (i in cluster1[1:(length(cluster1)-1)]){
for (j in (i+1):cluster1[length(cluster1)]){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
cluster1 = 1:21
cluster2 = 22:32
diffmat_new = matrix(0, length(cluster2), length(cluster2))
diffmat_old = matrix(0, length(cluster2), length(cluster2))
for (i in cluster1[1:(length(cluster2)-1)]){
for (j in (i+1):cluster1[length(cluster2)]){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
sum(diffmat_new)/(11*11-11)
sum(diffmat_old)/(11*11-11)
plot(res$aic$theta[,22], type = 'l', ylim = c(-5,5))
for (i in 22:32){
lines(res$aic$theta[,i])
}
plot(res_old$aic$theta[,22], type = 'l', ylim = c(-5,5))
for (i in 22:32){
lines(res_old$aic$theta[,i])
}
cluster1 = 1:21
cluster2 = 22:32
diffmat_new = matrix(0, length(cluster2), length(cluster2))
diffmat_old = matrix(0, length(cluster2), length(cluster2))
for (i in cluster1[1:(length(cluster2)-1)]){
for (j in (i+1):cluster1[length(cluster2)]){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
get_intra_cluster_var = function(cluster){
diffmat_new = matrix(0, length(cluster), length(cluster))
diffmat_old = matrix(0, length(cluster2), length(cluster))
for (i in cluster1[1:(length(cluster)-1)]){
for (j in (i+1):cluster[length(cluster)]){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
}
get_intra_cluster_var = function(cluster){
diffmat_new = matrix(0, length(cluster), length(cluster))
diffmat_old = matrix(0, length(cluster2), length(cluster))
for (i in cluster1[1:(length(cluster)-1)]){
for (j in (i+1):cluster[length(cluster)]){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
return(list(
new = sum(diffmat_new)/(length(cluster)*(length(cluster)-1)),
old = sum(diffmat_old)/(length(cluster)*(length(cluster)-1))))
}
get_intra_cluster_var(cluster1)
get_intra_cluster_var = function(cluster){
diffmat_new = matrix(0, length(cluster), length(cluster))
diffmat_old = matrix(0, length(cluster2), length(cluster))
for (i in cluster[1:(length(cluster)-1)]){
for (j in (i+1):cluster[length(cluster)]){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
return(list(
new = sum(diffmat_new)/(length(cluster)*(length(cluster)-1)),
old = sum(diffmat_old)/(length(cluster)*(length(cluster)-1))))
}
get_intra_cluster_var(cluster1)
get_intra_cluster_var = function(cluster){
diffmat_new = matrix(0, length(cluster), length(cluster))
diffmat_old = matrix(0, length(cluster), length(cluster))
for (i in cluster[1:(length(cluster)-1)]){
for (j in (i+1):cluster[length(cluster)]){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
return(list(
new = sum(diffmat_new)/(length(cluster)*(length(cluster)-1)),
old = sum(diffmat_old)/(length(cluster)*(length(cluster)-1))))
}
get_intra_cluster_var(cluster1)
get_intra_cluster_var(cluster2)
cluster2
get_intra_cluster_var = function(cluster){
diffmat_new = matrix(0, length(cluster), length(cluster))
diffmat_old = matrix(0, length(cluster), length(cluster))
for (i in cluster[1:(length(cluster)-1)]){
for (j in (i+1):cluster[length(cluster)]){
vec1 = res$aic$theta[,i]
vec2 = res$aic$theta[,j]
diffmat_new[i,j] = diffmat_new[j,i] = sum((vec1-vec2)^2)
vec1 = res_old$aic$theta[,i]
vec2 = res_old$aic$theta[,j]
diffmat_old[i,j] = diffmat_old[j,i] = sum((vec1-vec2)^2)
}
}
return(list(
new = sum(diffmat_new)/(length(cluster)*(length(cluster)-1)),
old = sum(diffmat_old)/(length(cluster)*(length(cluster)-1))))
}
get_intra_cluster_var(cluster2)
cluster2
dim(res$aic$theta)
file.exists("~/.ssh/id_rsa.pub")
